Renee McLain
Assignment 2
Refactor.txt
Pick five cards implemented in dominion.c. Choose 3 cards of your choice and smithy and adventurer cards are mandatory. Refactor the code so that these cards are implemented in their own functions, rather than as part of the switch statement in cardEffect. You should call the functions for these cards in the appropriate place in cardEffect. Check in your changes, with appropriate git commit messages. Document your changes in a text file in your dominion source directory, called “refactor.txt.” Your implementation of at least 4 of these 5 cards should be incorrect in some way, i.e., you should introduce subtle bugs that are hard to catch in your changes. Introducing bugs in smithy and adventurer is mandatory.  Write information of your bugs also in refactor.txt.  Later in this class, other students will test your code, so try to keep your bugs not superficial. Refactored program should compile without any error.

Smithy:(cost = 4 coins) +3 cards
Bug: +4 cards (see line 13, in the if statement)

Adventurer:(cost = 6) Reveal cards from your deck until you reveal 2 treasure cards.  Put those treasure cards into your hand and discard the other revealed cards.
Bug: cost = 5 coins (see line 728, in the switch statement, not in the function)

Village:(cost = 3 coins) +1 card; +2 actions
Bug: +3 actions (see line 28)

Remodel:(cost = 4 coins) Trash a card, gain a card costing up to 2 more coins than the trashed card.
Bug: opponents get +1 card(which ever card player chooses) added to their deck (see loop inside of function starting on line 46 int p;)

Mine:(cost = 5 coins) Trash a treasure card from your hand.  Gain a treasure card costing up to 3 coins more. Put it in your hand.
Bug: Gain two treasure cards(see for loop created starting at line 81: it's wrapped around gainCard())
