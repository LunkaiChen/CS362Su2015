--------------- smithy --------------- :
-A for loop runs three times, each time calling "drawCard" to draw a card for the player.
-discardCard is called to discard smithy. 

--------------- adventure --------------- 
-Create an int array called temphand to hold non-treasure cards that may be drawn.
-Run a while loop runs until 2 treasure cards have been drawn.
In first while loop:
	-If the deck is empty it is shuffled
	-A card is drawn and put into the player's hand with drawcard(). If the card is treasure, drawntreasure incremented.
		Else, temphand[index of drawn adventure cards] becomes that card and the player's hand is decremented, 
	which removes the card from the player's hand.
Then another while loop discards the "drawn treasures." 

--------------- discardCard() --------------- 
-check if the trashFlag is less than 1 (0 was sent in) 
-state member playedCards, which uses state's member playedCardCount as its array index,
 becomes whatever state's member multi-dimensional int array "hand" has at its position for [currentPlayer][handPos].
Now the card is in the player's "played" pile.
-card in the player's hand is set to -1, which is not the number for any card in the game (from enumCard in dominion.h). 

-check whether the hand is either empty or contains only 1 more card 
by comparing handPos to the player's handCount. If yes,the player's handCount is decremented, removing the card. 
Else, the discarded card is replaced with the last card (indexed below it)
in the player's current hand. This is done by replacing the card at the current
handPos (which should be the discarded card) with the card card at the current (handCount - 1) position.

--------------- updateCoins() --------------- 
 
-set the member of the struct state (a gamestate struct, defined in dominion.h) called coins to 0, 
use for-loop to count up the old total amount of money the player had, add the "bonus" (new coin) to 
the total.